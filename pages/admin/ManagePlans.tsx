
import React, { useState, useEffect } from 'react';
import type { Plan } from '../../types';
import { getPlans, createPlan, updatePlan, deletePlan } from '../../services/api';
import Modal from '../../components/Modal';

const ManagePlans: React.FC = () => {
    const [plans, setPlans] = useState<Plan[]>([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingPlan, setEditingPlan] = useState<Plan | null>(null);

    const fetchPlans = async () => {
        setLoading(true);
        const data = await getPlans();
        setPlans(data);
        setLoading(false);
    };

    useEffect(() => {
        fetchPlans();
    }, []);

    const handleOpenModal = (plan: Plan | null = null) => {
        setEditingPlan(plan);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingPlan(null);
    };

    const handleSavePlan = async (planData: Plan) => {
        if (editingPlan) {
            await updatePlan(planData);
        } else {
            // @ts-ignore - id is generated by mock API
            await createPlan(planData);
        }
        fetchPlans();
        handleCloseModal();
    };
    
    const handleDeletePlan = async (planId: string) => {
        if (window.confirm("Are you sure you want to delete this plan?")) {
            await deletePlan(planId);
            fetchPlans();
        }
    };

    return (
        <div className="p-8">
            <div className="flex justify-between items-center mb-6">
                <h2 className="text-3xl font-bold text-lumen-gray-800">Manage Plans</h2>
                <button onClick={() => handleOpenModal()} className="bg-lumen-green text-white px-4 py-2 rounded-md font-semibold hover:bg-green-700 transition">
                    Add New Plan
                </button>
            </div>

            {loading ? (
                <p>Loading plans...</p>
            ) : (
                <div className="bg-white shadow-md rounded-lg overflow-hidden">
                    <table className="min-w-full divide-y divide-lumen-gray-200">
                        <thead className="bg-lumen-gray-50">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-lumen-gray-500 uppercase tracking-wider">Plan Name</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-lumen-gray-500 uppercase tracking-wider">Product Type</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-lumen-gray-500 uppercase tracking-wider">Price</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-lumen-gray-500 uppercase tracking-wider">Data (GB)</th>
                                <th className="px-6 py-3 text-right text-xs font-medium text-lumen-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-lumen-gray-200">
                            {plans.map(plan => (
                                <tr key={plan.id}>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-lumen-gray-900">{plan.name}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-lumen-gray-500">{plan.productType}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-lumen-gray-500">${plan.price.toFixed(2)}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-lumen-gray-500">{plan.dataQuota}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <button onClick={() => handleOpenModal(plan)} className="text-lumen-blue hover:text-blue-700 mr-4">Edit</button>
                                        <button onClick={() => handleDeletePlan(plan.id)} className="text-red-600 hover:text-red-800">Delete</button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}
            
            {isModalOpen && <PlanFormModal plan={editingPlan} onSave={handleSavePlan} onClose={handleCloseModal} />}
        </div>
    );
};

interface PlanFormModalProps {
    plan: Plan | null;
    onSave: (plan: Plan) => void;
    onClose: () => void;
}

const PlanFormModal: React.FC<PlanFormModalProps> = ({ plan, onSave, onClose }) => {
    const [formData, setFormData] = useState<Plan>(plan || { id: '', name: '', productType: 'Fibernet', price: 0, dataQuota: 0, speed: '', features: [], description: '' });

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: name === 'price' || name === 'dataQuota' ? parseFloat(value) : value }));
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        onSave(formData);
    };

    return (
        <Modal isOpen={true} onClose={onClose} title={plan ? 'Edit Plan' : 'Add New Plan'}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <label className="block text-sm font-medium text-lumen-gray-700">Plan Name</label>
                    <input type="text" name="name" value={formData.name} onChange={handleChange} className="mt-1 block w-full border border-lumen-gray-300 rounded-md shadow-sm p-2" required />
                </div>
                <div>
                    <label className="block text-sm font-medium text-lumen-gray-700">Product Type</label>
                    <select name="productType" value={formData.productType} onChange={handleChange} className="mt-1 block w-full border border-lumen-gray-300 rounded-md shadow-sm p-2">
                        <option value="Fibernet">Fibernet</option>
                        <option value="Broadband Copper">Broadband Copper</option>
                    </select>
                </div>
                <div className="grid grid-cols-2 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-lumen-gray-700">Price ($)</label>
                        <input type="number" name="price" value={formData.price} onChange={handleChange} className="mt-1 block w-full border border-lumen-gray-300 rounded-md shadow-sm p-2" required />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-lumen-gray-700">Data Quota (GB)</label>
                        <input type="number" name="dataQuota" value={formData.dataQuota} onChange={handleChange} className="mt-1 block w-full border border-lumen-gray-300 rounded-md shadow-sm p-2" required />
                    </div>
                </div>
                {/* Add more fields for speed, features, description if needed */}
                <div className="flex justify-end space-x-3 pt-4">
                    <button type="button" onClick={onClose} className="bg-lumen-gray-200 text-lumen-gray-800 px-4 py-2 rounded-md font-semibold hover:bg-lumen-gray-300">Cancel</button>
                    <button type="submit" className="bg-lumen-blue text-white px-4 py-2 rounded-md font-semibold hover:bg-blue-700">Save Plan</button>
                </div>
            </form>
        </Modal>
    );
};

export default ManagePlans;
